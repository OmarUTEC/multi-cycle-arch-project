Número A: 0.457 ➡️ 0x3EE9FBE7

Número B: 0.5 ➡️ 0x3F000000

Resultado Esperado: 0.457 + 0.5 = 0.957 ➡️ 0x3F74FDF4

// Cargar 0x3EE9FBE7 en R1
MOV     R1, #0xBE7      // Carga 12 bits bajos
MOVM    R1, #0x9F       // Carga 8 bits medios
MOVT    R1, #0x3EE      // Carga 12 bits altos

// Cargar 0x3F000000 en R2
MOV     R2, #0x000
MOVM    R2, #0x00
MOVT    R2, #0x3F0

// Realizar la suma de punto flotante
FADDS   R0, R1, R2

// Bucle infinito para detener el procesador
end: B end

E3A01BE7
E3C0109F
E34013EE
E3A02000
E3C02000
E34023F0
E1010002
EAFFFFFF

#########################################################

// Cargar 0x40200000 (2.5) en R1
MOV     R1, #0x000
MOVM    R1, #0x00
MOVT    R1, #0x402

// Cargar 0x40400000 (3.0) en R2
MOV     R2, #0x000
MOVM    R2, #0x00
MOVT    R2, #0x404

// Realizar la multiplicación de punto flotante
FMULS   R0, R1, R2

// Bucle infinito para detener el procesador
end: B end

E3A01000
E3C01000
E3401402
E3A02000
E3C02000
E3402404
E1010012
EAFFFFFF

##############################################################
numero : 0.5	0x3f000000
numero : 0.4375	 0x3ee00000

E3A01000
E3C01000
E34013EE
E3A02000
E3C02000
E34023F0
E1010002 //FADD

//Resultado esperado: 0,937500

E3A01000
E3C01000
E34013EE
E3A02000
E3C02000
E34023F0
E1010012 //FMUL

//Resultado esperado: 0,218750

+++++++++++++++++++++++++++ TEST FMUL +++++++++++++++++++++++++++++++
E3A01FFF  //MOV R1, #0xFFFFFFFFF
E3C010FF  //MOV R1, #0xFFFFFFFFF
E3401FFF  //MOV R1, #0xFFFFFFFFF
E3A02002  //MOV R2, #0x000000002
E3C02000  //MOV R2, #0x000000002
E3402000  //MOV R2, #0x000000002
E0A34291  //UMUL {R3,R4}, R1,R2
E0C56291  //SMUL {R5,R6}, R1,R2
E0447006  //SUB R7, R4, R6
E0858003  //ADD R8, R5, R3
0A000000  //CMP R7,R8
EA000005  //BEQ CHECKPOINT1
E0D56291  //B ERROR
BA000000  //CHECKPOINT1: SMULS {R5,R6}, R1,R2
EA000002  //BLT CHECKPOINT2
E0BA3291  //B ERROR
E3A01000  //CHECKPOINT2: MOV R1,#0x00000000
E3C01000  //CHECKPOINT2: MOV R1,#0x00000000
E3401800  //CHECKPOINT2: MOV R1,#0x00000000
E3A01000  //CHECKPOINT2: MOV R1,#0x80000000
E3C01000  //CHECKPOINT2: MOV R1,#0x80000000
E3401800  //CHECKPOINT2: MOV R1,#0x80000000
E0BA3291  //UMULS {R10,R3}, R1,R2
00AA3A93  //UMULEQ {R10,R3},R3,R10
EA000000  //B END

///////////////////16BITS//////////////////////

E3A00080 //MOV R0, #180
E3A01000 //MOV R1, 0.0
E3C01000 //MOV R1, 0.0
E3401000 //MOV R1, 0.0
E3A02200 //MOV R2, 3.0
E3C02004 //MOV R2, 3.0
E3402000 //MOV R2, 3.0
E3A03E66 //MOV R3, 0.1
E3C03002 //MOV R3, 0.1
E3403000 //MOV R3, 0.1
E3A04666 //MOV R4, -0.4
E3C0400B //MOV R4, -0.4
E3404000 //MOV R4, -0.4
E3A05E66 //MOV R5, 0.1
E3C05002 //MOV R5, 0.1
E3405000 //MOV R5, 0.1
E1A06002 //FOR: MOV R6, R2; R6->00004200
E1266013 //FMUL R6, R3; -> 0.2998046875 ->34cc
E1A07001 // MOV R7,R1;
E1277014 // FMUL R7, R4 
E1A08002 //MOV R8,R2;
E1288015 //FMUL R8, R5; -> 0.2998046875
E1277008 //FADD R7, R7, R8; -> 0 + 34cc = 34cc
E1277013 //FMUL R7, R3;  34cc * 2e66 = 0.02997 = 27ac
E1211006 //FADD R1, R1, R6; = 0000 + 34cc
E1222007 //FADD R2, R7;  4200+27ac= 3+0.02996826171875 = 3.029296875 =420f
E2500001 //SUBS R0,R0,#1 : 0x
0A000000 // BEQ END_FOR;
EAFFFFF2 // B FOR;

///////////////////32BITS//////////////////////
E3A00080 //MOV R0, #180
E3A01000 //MOV R1, 0.0
E3C01000 //MOV R1, 0.0
E3401000 //MOV R1, 0.0
E3A02000 //MOV R2, 3.0
E3C02000 //MOV R2, 3.0
E3402404 //MOV R2, 3.0
E3A03CCD //MOV R3, 0.1
E3C030CC //MOV R3, 0.1
E34033DC //MOV R3, 0.1
E3A04CCD //MOV R4, -0.4
E3C040CC //MOV R4, -0.4
E3404BEC //MOV R4, -0.4
E3A05CCD //MOV R5, 0.1
E3C050CC //MOV R5, 0.1
E34053DC //MOV R5, 0.1
E1A06002 //FOR: MOV R6, R2;
E1066013 //FMUL R6, R3; -> 0.29999998 3e999999
E1A07001 // MOV R7,R1;
E1077014 // FMUL R7, R4 
E1A08002 //MOV R8,R2;
E1088015 //FMUL R8, R5; -> 0.29999998 3e999999
E1077008 //FADD R7, R7, R8; -> -0 + 3e999999 = 3e999999
E1077013 //FMUL R7, R3;  3e999999 * 3dcccccd = 0.029999997 = 3cf5c28e
E1111006 //FADD R1, R1, R6; = 3e999999 +  00000000
E1022007 //FADD R2, R7;  3cf5c28e+40400000=0.029999997+3 = 3.029999997
E2500001 //SUBS R0,R0,#1 : 0x
0A000000 // BEQ END_FOR;
EAFFFFF2 // B FOR;