ARCHIVO: alu.v
// Harris version con soporte para punto flotante IEEE 754 - 32 bits
// Implementación manual sin funciones $bitstoreal

module alu(
    input  [31:0] a, b,
    input  [3:0] ALUControl,  // Cambiado a 4 bits para más operaciones
    output reg [31:0] Result,
    output reg [31:0] ResultHi,
    output wire [3:0] ALUFlags,
    input wire [31:0] ExtImm,
    input wire [31:0] A
);

    wire neg, zero, carry, overflow;
    wire [31:0] condinvb;
    wire [32:0] sum;
    wire is_logic;

    //para 64 bits
    wire signo_a, signo_b, resultado_signo;
    wire [31:0] abs_a, abs_b;
    wire [63:0] mul_unsigned;
    wire [63:0] smul_result;
    wire [63:0] umul_result = a * b;

    // Variables para punto flotante IEEE 754
    wire sign_a, sign_b, result_sign;
    wire [7:0] exp_a, exp_b, result_exp;
    wire [22:0] mant_a, mant_b;
    wire [23:0] norm_mant_a, norm_mant_b; // Con bit implícito
    wire [47:0] mult_result;
    wire [24:0] add_result;
    wire [22:0] result_mant;
    reg [7:0] exp_diff;
    reg [23:0] aligned_mant;
    wire [31:0] float_add_result, float_mul_result;

    assign condinvb = ALUControl[0] ? ~b : b;
    assign sum = a + condinvb + ALUControl[0];

    //SMUL
    assign signo_a = a[31];   
    assign signo_b = b[31]; 
    assign resultado_signo = signo_a ^ signo_b;
    
    //saco valores absolutos
    assign abs_a = signo_a ? (~a + 1) : a;  // |a|
    assign abs_b = signo_b ? (~b + 1) : b;  // |b|
    
    //multiplicacion sin signo de los valores absolutos
    assign mul_unsigned = abs_a * abs_b;
    
    // le damos signo al resultado
    assign smul_result = resultado_signo ? (~mul_unsigned[63:0] + 1) : mul_unsigned[63:0];
    
    // Descomposición IEEE 754 para suma
    assign sign_a = a[31];
    assign sign_b = b[31];
    assign exp_a = a[30:23];
    assign exp_b = b[30:23];
    assign mant_a = a[22:0];
    assign mant_b = b[22:0];
    
    // Añadir bit implícito (1.mantissa)
    assign norm_mant_a = {1'b1, mant_a};
    assign norm_mant_b = {1'b1, mant_b};
    
    // Suma de punto flotante simplificada
    always @(*) begin
        if (exp_a >= exp_b) begin
            exp_diff = exp_a - exp_b;
            aligned_mant = norm_mant_b >> exp_diff;
        end else begin
            exp_diff = exp_b - exp_a;
            aligned_mant = norm_mant_a >> exp_diff;
        end
    end
    
    assign add_result = (exp_a >= exp_b) ? 
                       (sign_a == sign_b ? norm_mant_a + aligned_mant : norm_mant_a - aligned_mant) :
                       (sign_a == sign_b ? norm_mant_b + aligned_mant : norm_mant_b - aligned_mant);
    
    assign result_exp = (exp_a >= exp_b) ? exp_a : exp_b;
    assign result_sign = (exp_a >= exp_b) ? sign_a : sign_b;
    assign result_mant = add_result[22:0];
    
    assign float_add_result = {result_sign, result_exp, result_mant};
    
    // Multiplicación de punto flotante simplificada
    assign mult_result = norm_mant_a * norm_mant_b;
    assign float_mul_result = {
        sign_a ^ sign_b,                    // Signo
        exp_a + exp_b - 8'd127,             // Exponente
        mult_result[45:23]                  // Mantissa (tomamos bits superiores)
    };
    
    always @(*) begin
        Result   = 32'b0;
        ResultHi = 32'b0;
        
        case (ALUControl[3:0])
            4'b0000, 4'b0001: Result = sum;      // ADD, SUB
            4'b0010:          Result = a & b;     // AND
            4'b0011:          Result = a | b;     // OR
            4'b0111:          Result = a * b;     // MUL
            4'b0100:          Result = a / b;     // DIV
            4'b1011: Result = ExtImm;                        // MOV low16
            4'b1100: Result = (A & 32'h000FFFFF) | ExtImm;   // MOVT high16
            4'b1101: Result = (A & 32'hFF000FFF) | ExtImm;   // MOVM 

            4'b0110:          begin               // SMUL
                Result = smul_result[31:0];
                ResultHi = smul_result[63:32];
            end
            4'b0101:          begin               // UMUL
                Result = umul_result [31:0];
                ResultHi = umul_result [63:32];
            end
            4'b1000:          begin               // FADDS (suma flotante)
                Result = float_add_result;
            end
            4'b1001:          begin               // FMULS (multiplicación flotante)
                Result = float_mul_result;
            end
            default:          Result = 32'b0;
        endcase
    end

    assign neg = Result[31];
    assign zero = (Result == 32'b0);

    // Asignación modificada para is_logic - incluye MOV
    assign is_logic = (ALUControl[3:1] == 3'b001)   // AND, OR
                    || (ALUControl == 4'b0100)      // DIV
                    || (ALUControl == 4'b0111)      // MUL
                    || (ALUControl == 4'b0110)      // SMUL
                    || (ALUControl == 4'b0101)      // UMUL
                    || (ALUControl == 4'b1000)      // FADDS
                    || (ALUControl == 4'b1001)      // FMULS
                    || (ALUControl == 4'b1010);     // MOV - AGREGADO
                    

    assign carry = is_logic ? 1'b0 : sum[32];
    assign overflow = is_logic ? 1'b0 :
        ~(a[31] ^ b[31] ^ ALUControl[0]) &&
        (a[31] ^ sum[31]);

    assign ALUFlags = {neg, zero, carry, overflow};

endmoduleARCHIVO: arm.v
module arm (
  input  wire        clk,
  input  wire        reset,
  input  wire [31:0] ReadData,
  output wire        MemWrite,
  output wire [31:0] Adr,
  output wire [31:0] WriteData,
  output wire [31:0] PC,
  output wire [31:0] Instr
);

  //––– cables internos –––
  wire [3:0]  ALUFlags;
  wire        PCWrite, RegWrite, IRWrite, AdrSrc;
  wire [1:0]  RegSrc, ALUSrcB, ImmSrc, ResultSrc;
  wire        ALUSrcA;
  wire [3:0]  ALUControl;     // Cambiado a 4 bits
  wire        RegWriteHi;
  wire        IsMovt;         // Nueva señal
  wire        IsMovm; 
  controller c (
    .clk        (clk),
    .reset      (reset),
    .Instr      (Instr[31:0]),
    .ALUFlags   (ALUFlags),
    .PCWrite    (PCWrite),
    .MemWrite   (MemWrite),
    .RegWrite   (RegWrite),
    .IRWrite    (IRWrite),
    .AdrSrc     (AdrSrc),
    .RegSrc     (RegSrc),
    .ALUSrcA    (ALUSrcA),
    .ALUSrcB    (ALUSrcB),
    .ResultSrc  (ResultSrc),
    .ImmSrc     (ImmSrc),
    .ALUControl (ALUControl),
    .RegWriteHi (RegWriteHi),
    .IsMovm     (IsMovm),
    .IsMovt     (IsMovt)      // Nueva conexión
  );

  datapath dp (
    .clk        (clk),
    .reset      (reset),
    .MemWrite   (MemWrite),     
    .Adr        (Adr),
    .WriteData  (WriteData),
    .ReadData   (ReadData),
    .Instr      (Instr),
    .PC         (PC),
    .ALUFlags   (ALUFlags),
    .PCWrite    (PCWrite),
    .RegWrite   (RegWrite),
    .IRWrite    (IRWrite),
    .AdrSrc     (AdrSrc),
    .RegSrc     (RegSrc),
    .ALUSrcA    (ALUSrcA),
    .ALUSrcB    (ALUSrcB),
    .ResultSrc  (ResultSrc),
    .ImmSrc     (ImmSrc),
    .ALUControl (ALUControl),
    .RegWriteHi (RegWriteHi),
    .IsMovm     (IsMovm),
    .IsMovt     (IsMovt)      // Nueva conexión
  );

endmoduleARCHIVO: condcheck.v
module condcheck (
    Cond,
    Flags,
    CondEx
);
    input  wire [3:0] Cond;
    input  wire [3:0] Flags;
    output reg        CondEx;
    wire neg, zero, carry, overflow, ge;

    assign {neg, zero, carry, overflow} = Flags;
    assign ge = (neg == overflow);

    always @(*) begin
        case (Cond)
            4'b0000: CondEx = zero;
            4'b0001: CondEx = ~zero;
            4'b0010: CondEx = carry;
            4'b0011: CondEx = ~carry;
            4'b0100: CondEx = neg;
            4'b0101: CondEx = ~neg;
            4'b0110: CondEx = overflow;
            4'b0111: CondEx = ~overflow;
            4'b1000: CondEx = carry & ~zero;
            4'b1001: CondEx = ~(carry & ~zero);
            4'b1010: CondEx = ge;
            4'b1011: CondEx = ~ge;
            4'b1100: CondEx = ~zero & ge;
            4'b1101: CondEx = ~(~zero & ge);
            4'b1110: CondEx = 1'b1;
            default: CondEx = 1'bx;
        endcase
    end
endmoduleARCHIVO: condlogic.v
module condlogic (
    clk,
    reset,
    Cond,
    ALUFlags,
    FlagW,
    PCS,
    NextPC,
    RegW,
    MemW,
    PCWrite,
    RegWrite,
    MemWrite,
    RegWHi,         // Nueva entrada
    RegWriteHi      // Nueva salida
);
    // Port declarations
    input  wire       clk;
    input  wire       reset;
    input  wire [3:0] Cond;
    input  wire [3:0] ALUFlags;
    input  wire [1:0] FlagW;
    input  wire       PCS;
    input  wire       NextPC;
    input  wire       RegW;
    input  wire       MemW;
    output wire       PCWrite;
    output wire       RegWrite;
    output wire       MemWrite;
    input  wire       RegWHi;        // Nueva entrada
    output wire       RegWriteHi;    // Nueva salida

    // Internal signals
    wire        CondEx;
    wire        CondExNext;
    wire [1:0]  FlagWrite;
    wire [3:0]  Flags;

    // Flag registers
    flopenr #(.WIDTH(2)) flagreg_hi (
        .clk   (clk),
        .reset (reset),
        .en    (FlagWrite[1]),
        .d     (ALUFlags[3:2]),
        .q     (Flags[3:2])
    );
    flopenr #(.WIDTH(2)) flagreg_lo (
        .clk   (clk),
        .reset (reset),
        .en    (FlagWrite[0]),
        .d     (ALUFlags[1:0]),
        .q     (Flags[1:0])
    );

    // Evaluate condition
    condcheck condchk (
        .Cond   (Cond),
        .Flags  (Flags),
        .CondEx (CondEx)
    );

    // Latch condition 
    flopr #(.WIDTH(1)) condreg (
        .clk   (clk),
        .reset (reset),
        .d     (CondEx),
        .q     (CondExNext)
    );

    assign FlagWrite = FlagW & {2{CondEx}};
    assign RegWrite  = RegW  & CondEx;      
    assign MemWrite  = MemW  & CondEx;     
    assign PCWrite   = PCS   | (NextPC & CondEx);
    assign RegWriteHi = RegWHi & CondEx;    // Nueva asignación

endmoduleARCHIVO: controller.v
// ARCHIVO: controller.v
module controller (
    clk,
    reset,
    Instr,
    ALUFlags,
    PCWrite,
    MemWrite,
    RegWrite,
    IRWrite,
    AdrSrc,
    RegSrc,
    ALUSrcA,
    ALUSrcB,
    ResultSrc,
    ImmSrc,
    ALUControl,
    RegWriteHi,
    IsMovt,
    IsMovm      // <-- 1. AÑADIR A LA LISTA DE PUERTOS
);
    input wire clk;
    input wire reset;
    input wire [31:0] Instr;
    input wire [3:0] ALUFlags;
    output wire PCWrite;
    output wire MemWrite;
    output wire RegWrite;
    output wire IRWrite;
    output wire AdrSrc;
    output wire [1:0] RegSrc;
    output wire ALUSrcA;
    output wire [1:0] ALUSrcB;
    output wire [1:0] ResultSrc;
    output wire [1:0] ImmSrc;
    output wire [3:0] ALUControl;
    output wire RegWriteHi;
    output wire IsMovt;
    output wire IsMovm;      // <-- 2. DECLARAR COMO SALIDA

    wire [1:0] FlagW;
    wire PCS;
    wire NextPC;
    wire RegW;
    wire MemW;
    wire RegWHi;

    /* ––– DECODE ––– */
    decode dec (
        .clk        (clk),
        .reset      (reset),
        .Instr      (Instr),
        // salidas:
        .FlagW      (FlagW),
        .PCS        (PCS),
        .NextPC     (NextPC),
        .RegW       (RegW),
        .MemW       (MemW),
        .IRWrite    (IRWrite),
        .AdrSrc     (AdrSrc),
        .ResultSrc  (ResultSrc),
        .ALUSrcA    (ALUSrcA),
        .ALUSrcB    (ALUSrcB),
        .ImmSrc     (ImmSrc),
        .RegSrc     (RegSrc),
        .ALUControl (ALUControl),
        .RegWHi     (RegWHi),
        .IsMovt     (IsMovt),
        .IsMovm     (IsMovm)    // <-- 3. CONECTAR LA SEÑAL DESDE 'decode'
    );

    condlogic cl(
        .clk(clk),
        .reset(reset),
        .Cond(Instr[31:28]),
        .ALUFlags(ALUFlags),
        .FlagW(FlagW),
        .PCS(PCS),
        .NextPC(NextPC),
        .RegW(RegW),
        .MemW(MemW),
        .PCWrite(PCWrite),
        .RegWrite(RegWrite),
        .MemWrite(MemWrite),
        .RegWHi(RegWHi),
        .RegWriteHi(RegWriteHi)
    );
endmoduleARCHIVO: datapath.v
//---------------------------------------------------------------------
//  Datapath – versión completa con soporte UMULL/SMULL y punto flotante
//  Codificación: 19:16 = RdHi, 15:12 = RdLo, 11:8 = Rm, 3:0 = Rn
//---------------------------------------------------------------------
module datapath (
    input  wire        clk,
    input  wire        reset,
    // memoria
    input  wire        MemWrite,
    output wire [31:0] Adr,
    output wire [31:0] WriteData,
    input  wire [31:0] ReadData,
    // buses de control principal
    output wire [31:0] Instr,
    output wire [31:0] PC,
    output wire [3:0]  ALUFlags,
    input  wire        PCWrite,
    input  wire        RegWrite,
    input  wire        IRWrite,
    input  wire        AdrSrc,
    input  wire [1:0]  RegSrc,
    input  wire        ALUSrcA,
    input  wire [1:0]  ALUSrcB,
    input  wire [1:0]  ResultSrc,
    input  wire [1:0]  ImmSrc,
    input  wire [3:0]  ALUControl,    // Cambiado a 4 bits
    input  wire        RegWriteHi,
    input  wire        IsMovt,
    input  wire        IsMovm         // <-- AÑADIR

);

    //––– Señales internas
    wire [31:0] PCNext, ExtImm;
    wire [31:0] SrcA, SrcB, Result, Data;
    wire [31:0] RD1, RD2, A, ALUResult, ALUOut;
    wire [31:0] ALUResultHi, ALUOutHi;
    wire [3:0]  WA4;

    //-----------------------------------------------------------------
    //  Lógica de PC e IR
    //-----------------------------------------------------------------
    assign PCNext = Result;

    flopenr #(.WIDTH(32)) pcreg (
        .clk   (clk), .reset(reset), .en(PCWrite),
        .d(PCNext),  .q(PC)
    );

    flopenr #(.WIDTH(32)) irreg (
        .clk   (clk), .reset(reset), .en(IRWrite),
        .d(ReadData), .q(Instr)
    );

    //-----------------------------------------------------------------
    //  Banco de registros – selección de operandos
    //-----------------------------------------------------------------
    // Detectar instrucción MUL de 32 bits (NO flotantes)
    wire isMul = (Instr[7:4] == 4'b1001) && (Instr[27:23] != 5'b00001);  // MUL pero no UMULL/SMULL

    // Primer operando (A) → Rm cuando MUL; de lo contrario Rn o PC
    // Si es MOVT, el operando A es el mismo registro de destino (Rd).
    // De lo contrario, se usa la lógica original.
    // Reemplaza la línea de assign RA1
    wire [3:0] RA1 = (IsMovt || IsMovm) ? Instr[15:12] : // <-- MODIFICAR
                 (isMul       ? Instr[11:8]      :
                 (RegSrc[0]   ? 4'hF             :
                                Instr[19:16]));

    // Segundo operando (B) → Rn cuando MUL; de lo contrario Rm o Rd
    wire [3:0] RA2 = isMul        ? Instr[3:0]             :
                     (RegSrc[1]   ? Instr[15:12]           :
                                    Instr[3:0]);

    // Direcciones de escritura
    wire [3:0] WA3 = Instr[15:12];   // RdLo
    assign     WA4 = Instr[19:16];   // RdHi

    regfile rf (
        .clk  (clk),
        .we3  (RegWrite),
        .ra1  (RA1),
        .ra2  (RA2),
        .wa3  (WA3),
        .wd3  (Result),
        .r15  (Result),
        .rd1  (RD1),
        .rd2  (RD2),
        .we4  (RegWriteHi),
        .wa4  (WA4),
        .wd4  (ALUOutHi)
    );

    //-----------------------------------------------------------------
    //  Canal de datos hacia la ALU
    //-----------------------------------------------------------------
    flopr #(.WIDTH(32)) ffRD1 (.clk(clk), .reset(reset), .d(RD1), .q(A));
    flopr #(.WIDTH(32)) ffRD2 (.clk(clk), .reset(reset), .d(RD2), .q(WriteData));

    assign SrcA = ALUSrcA ? PC : A;

    mux3 #(32) muxALUSrcB (
        .d0(WriteData),
        .d1(ExtImm),
        .d2(32'd4),
        .s(ALUSrcB),
        .y(SrcB)
    );

    // Instancia del módulo extend con TODAS las conexiones
    extend ext (
        .Instr(Instr[23:0]),
        .ImmSrc(ImmSrc),
        .IsMovm(IsMovm),
        .IsMovt(IsMovt),      // Conectar IsMovt
        .ExtImm(ExtImm)
    );

    // Instancia del módulo alu con TODAS las conexiones
    alu alu (
        .a(SrcA),
        .b(SrcB),
        .ALUControl(ALUControl),
        .Result(ALUResult),
        .ResultHi(ALUResultHi),
        .ALUFlags(ALUFlags),
        .ExtImm(ExtImm),      // Conectar ExtImm
        .A(A)                 // Conectar A
    );

    //-----------------------------------------------------------------
    //  Retardo de un ciclo de los resultados de la ALU
    //-----------------------------------------------------------------
    flopr #(.WIDTH(32)) ffALUOut    (.clk(clk), .reset(reset), .d(ALUResult),   .q(ALUOut));
    flopr #(.WIDTH(32)) ffALUOutHi  (.clk(clk), .reset(reset), .d(ALUResultHi), .q(ALUOutHi));

    //-----------------------------------------------------------------
    //  Multiplexor de resultado final
    //-----------------------------------------------------------------
    mux3 #(32) muxResultSrc (
        .d0(ALUOut),
        .d1(Data),
        .d2(ALUResult),
        .s(ResultSrc),
        .y(Result)
    );

    //-----------------------------------------------------------------
    //  Acceso a memoria de datos
    //-----------------------------------------------------------------
    mux2 #(32) muxAdrSrc (.d0(PC), .d1(Result), .s(AdrSrc), .y(Adr));

    flopr #(.WIDTH(32)) ffData (.clk(clk), .reset(reset), .d(ReadData), .q(Data));
endmoduleARCHIVO: decode.v
module decode (
    input  wire        clk,
    input  wire        reset,
    input  wire [31:0] Instr,

    // Control outputs
    output reg  [1:0]  FlagW,
    output wire        PCS,
    output wire        NextPC,
    output wire        RegW,
    output wire        MemW,
    output wire        IRWrite,
    output wire        AdrSrc,
    output wire [1:0]  ResultSrc,
    output wire        ALUSrcA,
    output wire [1:0]  ALUSrcB,
    output wire [1:0]  ImmSrc,
    output wire [1:0]  RegSrc,
    output reg  [3:0]  ALUControl,
    output wire        RegWHi,
    output wire        IsMovt,
    output wire        IsMovm  // <-- AÑADIR ESTA LÍNEA

);
    // Instruction fields
    wire [1:0] Op      = Instr[27:26];            // opcode class
    wire        I_flag  = Instr[25];               // immediate flag
    wire [3:0]  Opcode  = Instr[24:21];            // nominal opcode
    wire        S_flag  = Instr[20];               // set flags
    wire [3:0]  Rd      = Instr[15:12];            // destination register

    // FSM control signals from mainfsm
    wire Branch, ALUOp, RegWHi_int;
    wire [5:0] Funct   = Instr[25:20];             // for mainfsm

    mainfsm fsm (
        .clk        (clk),
        .reset      (reset),
        .Op         (Op),
        .Funct      (Funct),
        .IRWrite    (IRWrite),
        .AdrSrc     (AdrSrc),
        .ALUSrcA    (ALUSrcA),
        .ALUSrcB    (ALUSrcB),
        .ResultSrc  (ResultSrc),
        .NextPC     (NextPC),
        .RegW       (RegW),
        .MemW       (MemW),
        .Branch     (Branch),
        .ALUOp      (ALUOp),
        .RegWHi     (RegWHi_int)
    );

    // Long multiply (UMULL/SMULL) pattern
    wire mul_long = (Op == 2'b00) && (Instr[27:23] == 5'b00001) && (Instr[7:4] == 4'b1001);
    wire is_movm = (Op == 2'b00) && I_flag && (Opcode == 4'b1110); // <-- AÑADIR

    wire is_umul   = mul_long && Instr[22];
    wire is_smul   = mul_long && !Instr[22];

    // Floating-point ops
    // En decode.v, reemplaza las líneas de detección de FADDS/FMULS por:

// En decode.v, busca las líneas donde se definen is_fadds e is_fmuls y reemplázalas por:
// Detección simplificada para instrucciones flotantes
    // Usamos Opcode bits para diferenciar: FADDS=1110, FMULS=1111
    wire is_custom_float = (Op == 2'b00) && (Opcode == 4'b1000);
    wire is_fadds = is_custom_float && !Instr[4];
    wire is_fmuls = is_custom_float && Instr[4];
    // MOV/MOVT immediates
    wire is_mov  = (Op == 2'b00) && I_flag && (Opcode == 4'b1101);
    wire is_movt = (Op == 2'b00) && I_flag && (Opcode == 4'b1010);
    assign IsMovt = is_movt;
    assign IsMovm = is_movm; // <-- AÑADIR

    // ALUControl and FlagW assignment
    always @(*) begin
        if (ALUOp) begin
            if      (is_umul)   ALUControl = 4'b0101;
            else if (is_smul)   ALUControl = 4'b0110;
            else if (is_fadds)  ALUControl = 4'b1000;
            else if (is_fmuls)  ALUControl = 4'b1001;
            else if (is_mov)    ALUControl = 4'b1011;
            else if (is_movt)   ALUControl = 4'b1100;
            else if (is_movm)   ALUControl = 4'b1101; // 

            else begin
                case (Opcode)
                    4'b0100: ALUControl = 4'b0000;  // ADD
                    4'b0010: ALUControl = 4'b0001;  // SUB
                    4'b0000: ALUControl = 4'b0010;  // AND
                    4'b1100: ALUControl = 4'b0011;  // ORR
                    4'b1001: ALUControl = 4'b0111;  // MUL (32)
                    4'b0001: ALUControl = 4'b0100;  // DIV
                    default: ALUControl = 4'b0000;
                endcase
            end
            FlagW = S_flag ? 2'b11 : 2'b00;
        end else begin
            ALUControl = 4'b0000;
            FlagW      = 2'b00;
        end
    end

    // Only write high register on long multiplies
    assign RegWHi = RegWHi_int & mul_long;

    // Final control outputs
    assign PCS     = ((Rd == 4'b1111) & RegW) | Branch;
    assign ImmSrc  = (is_mov || is_movt || is_movm) ? 2'b11 : Op; // <-- MODIFICAR

    assign RegSrc[0] = (Op == 2'b10);
    assign RegSrc[1] = (Op == 2'b01);
endmodule
ARCHIVO: extend.v
module extend (
    input  wire [23:0] Instr,
    input  wire [1:0]  ImmSrc,
    input  wire        IsMovt,
    input  wire        IsMovm, // <-- AÑADIR

    output reg  [31:0] ExtImm
);
    always @(*) begin
        case (ImmSrc)
            2'b00: ExtImm = {24'b0, Instr[7:0]};   // 8-bit immediate
            2'b01: ExtImm = {20'b0, Instr[11:0]};  // 12-bit immediate
            2'b10: ExtImm = {{6{Instr[23]}}, Instr[23:0], 2'b00}; // Branch offset

                //...
            // Reemplaza el bloque 'begin..end' para 2'b11
            2'b11: begin  // MOV/MOVT/MOVM
                if (IsMovm) begin
                    // MOVM: inmediato de 8 bits, desplazado 12 bits a la izquierda
                    ExtImm = {12'b0, Instr[7:0], 12'b0};
                end else if (!IsMovt) begin
                    // MOV: 12-bit immediate en bits bajos
                    ExtImm = {20'b0, Instr[11:0]};
                end else begin
                    // MOVT: 12-bit immediate en la parte alta (bits 27-16)
                    ExtImm = {4'b0, Instr[11:0], 20'b0};
                end
            end
    //...
            default: ExtImm = 32'b0;
        endcase
    end
endmoduleARCHIVO: flopenr.v

module flopenr (
	clk,
	reset,
	en,
	d,
	q
);
	parameter WIDTH = 8;
	input wire clk;
	input wire reset;
	input wire en;
	input wire [WIDTH - 1:0] d;
	output reg [WIDTH - 1:0] q;
	always @(posedge clk or posedge reset)
		if (reset)
			q <= 0;
		else if (en)
			q <= d;
endmoduleARCHIVO: flopr.v
module flopr (
	clk,
	reset,
	d,
	q
);
	parameter WIDTH = 8;
	input wire clk;
	input wire reset;
	input wire [WIDTH - 1:0] d;
	output reg [WIDTH - 1:0] q;
	always @(posedge clk or posedge reset)
		if (reset)
			q <= 0;
		else
			q <= d;
endmoduleARCHIVO: mainfsm.v
module mainfsm (
    clk,
    reset,
    Op,
    Funct,
    IRWrite,
    AdrSrc,
    ALUSrcA,
    ALUSrcB,
    ResultSrc,
    NextPC,
    RegW,
    MemW,
    Branch,
    ALUOp,
    RegWHi          // Nueva salida
);
    input  wire        clk;
    input  wire        reset;
    input  wire [1:0]  Op;
    input  wire [5:0]  Funct;
    output wire        IRWrite;
    output wire        AdrSrc;
    output wire        ALUSrcA;
    output wire [1:0]  ALUSrcB;
    output wire [1:0]  ResultSrc;
    output wire        NextPC;
    output wire        RegW;
    output wire        MemW;
    output wire        Branch;
    output wire        ALUOp;
    output wire        RegWHi;      // Nueva salida

    reg  [3:0]  state, nextstate;
    reg  [12:0] controls;   // Aumentado para incluir RegWHi

    // State encoding
    localparam FETCH    = 4'd0,
               DECODE   = 4'd1,
               MEMADR   = 4'd2,
               MEMRD    = 4'd3,
               MEMWB    = 4'd4,
               MEMWR    = 4'd5,
               EXECUTER = 4'd6,
               EXECUTEI = 4'd7,
               ALUWB    = 4'd8,
               BRANCH   = 4'd9,
               UNKNOWN  = 4'd10;

    // Sequential state register
    always @(posedge clk or posedge reset) begin
        if (reset)
            state <= FETCH;
        else
            state <= nextstate;
    end

    // Next‐state logic
    always @(*) begin
        casex (state)
            FETCH: nextstate = DECODE;
            DECODE: begin
                case (Op)
                    2'b00: begin
                        if (Funct[5] == 1'b1)
                            nextstate = EXECUTEI;
                        else
                            nextstate = EXECUTER;
                    end
                    2'b01: nextstate = MEMADR;
                    2'b10: nextstate = BRANCH;
                    default: nextstate = UNKNOWN;
                endcase
            end
            EXECUTER: nextstate = ALUWB;
            EXECUTEI: nextstate = ALUWB;
            MEMADR: begin
                if (Funct[0] == 1'b1)
                    nextstate = MEMRD;
                else
                    nextstate = MEMWR;
            end
            MEMRD: nextstate = MEMWB;
            MEMWR: nextstate = FETCH;
            MEMWB: nextstate = FETCH;
            BRANCH: nextstate = FETCH;
            ALUWB: nextstate = FETCH;
            default: nextstate = FETCH;
        endcase
    end

    // Control signal generation
    // {RegWHi,NextPC,Branch,MemW,RegW,IRWrite,AdrSrc,ResultSrc[1:0],ALUSrcA,ALUSrcB[1:0],ALUOp}
    always @(*) begin
        case (state)
        FETCH:      controls = 13'b0010010101100;  // 13 bits
        DECODE:     controls = 13'b0000000101100;  // 13 bits
        EXECUTER:   controls = 13'b0000000000001;  // 13 bits
        EXECUTEI:   controls = 13'b0000000000011;  // 13 bits
        MEMADR:     controls = 13'b0000000000010;  // 13 bits
        MEMRD:      controls = 13'b0000001000000;  // 13 bits
        MEMWR:      controls = 13'b0001001000000;  // 13 bits
        MEMWB:      controls = 13'b0000100010000;  // 13 bits
        ALUWB:      controls = 13'b1000100000000;  // RegWHi = 1, 13 bits
        BRANCH:     controls = 13'b0100000100010;  // 13 bits
        default:    controls = 13'bxxxxxxxxxxxxx;  // 13 bits
        endcase
    end
    
    assign {RegWHi, NextPC, Branch, MemW, RegW, IRWrite, AdrSrc, ResultSrc, ALUSrcA, ALUSrcB, ALUOp} = controls;
endmoduleARCHIVO: mem.v
module mem (
	clk,
	we,
	a,
	wd,
	rd
);
	input wire clk;
	input wire we;
	input wire [31:0] a;
	input wire [31:0] wd;
	output wire [31:0] rd;
	reg [31:0] RAM [63:0];
	initial $readmemh("memfile.mem", RAM);
	assign rd = RAM[a[31:2]]; 
	always @(posedge clk)
		if (we)
			RAM[a[31:2]] <= wd;
endmodule
ARCHIVO: mux2.v

module mux2 (
	d0,
	d1,
	s,
	y
);
	parameter WIDTH = 8;
	input wire [WIDTH - 1:0] d0;
	input wire [WIDTH - 1:0] d1;
	input wire s;
	output wire [WIDTH - 1:0] y;
	assign y = (s ? d1 : d0);
endmodule
ARCHIVO: mux3.v
module mux3 (
	d0,
	d1,
	d2,
	s,
	y
);
	parameter WIDTH = 8;
	input wire [WIDTH - 1:0] d0;
	input wire [WIDTH - 1:0] d1;
	input wire [WIDTH - 1:0] d2;
	input wire [1:0] s;
	output wire [WIDTH - 1:0] y;
	assign y = (s[1] ? d2 : (s[0] ? d1 : d0));
endmodule
ARCHIVO: regfile.v
// corregido
module regfile (
    input  wire        clk,
    // Puertos de lectura
    input  wire [3:0]  ra1,
    input  wire [3:0]  ra2,
    output wire [31:0] rd1,
    output wire [31:0] rd2,

    // Puerto de escritura 1 (Rd, producto bajo)
    input  wire        we3,
    input  wire [3:0]  wa3,
    input  wire [31:0] wd3,

    // Puerto de escritura 2 (Ra, producto alto)
    input  wire        we4,
    input  wire [3:0]  wa4,
    input  wire [31:0] wd4,

    // Valor especial de R15
    input  wire [31:0] r15
);
    // Banco de 16 registros de 32 bits
    reg [31:0] rf [0:15];

    // Escrituras sincrónicas en flanco de subida de clk
    always @(posedge clk) begin
        if (we3)
            rf[wa3] <= wd3;
        if (we4)
            rf[wa4] <= wd4;
    end

    // Lectura combinacional (rn=1111 lee r15)
    assign rd1 = (ra1 == 4'hF ? r15 : rf[ra1]);
    assign rd2 = (ra2 == 4'hF ? r15 : rf[ra2]);
endmodule
ARCHIVO: testbench.v
//Harris version 
//ok
module testbench;
    reg         clk;
    reg         reset;
    wire [31:0] PC;
    wire [31:0] Instr;
    wire [31:0] WriteData;
    wire [31:0] Adr;
    wire        MemWrite;
    wire [3:0]  state;    // Internal FSM state
    integer     i;

    assign state = dut.arm.c.dec.fsm.state;

    top dut (
        .clk       (clk),
        .reset     (reset),
        .PC        (PC),
        .Instr     (Instr),
        .WriteData (WriteData),
        .Adr       (Adr),
        .MemWrite  (MemWrite)
    );

    initial begin
        reset = 1;
        #22;
        reset = 0;
    end

    initial clk = 0;
    always #5 clk = ~clk;

    initial begin
        #25;
        $display("Contenido de IMEM tras el FETCH inicial:");
        for (i = 0; i < 7; i = i + 1)
            $display("IMEM[%0d] = %h", i, dut.mem.RAM[i]);
    end

    always @(posedge clk) begin
        if (dut.arm.dp.Instr !== 32'hxxxxxxxx) begin
            $display(
                "t=%0t  STATE=%0d  PC=0x%08h  Instr=0x%08h  IRWrite=%b  PCWrite=%b  MemWrite=%b  ALUControl=%03b  WriteData=0x%08h  Adr=0x%08h  ResultSrc=%b  ReadData=0x%08h  ExtImm=0x%08h  ALUFlags=%b",
                $time,
                state,
                dut.arm.dp.PC,
                dut.arm.dp.Instr,
                dut.arm.c.IRWrite,
                dut.arm.c.PCWrite,
                MemWrite,
                dut.arm.c.ALUControl,
                WriteData,
                Adr,
                dut.arm.c.ResultSrc,
                dut.mem.rd,
                dut.arm.dp.ExtImm,
                dut.arm.dp.ALUFlags
            );
        end
    end
    
    //----- REPORTE FINAL DEL BANCO DE REGISTROS -----
    initial begin
        #1000;                           // mismo instante en que ya ibas a terminar
        $display("\n=== CONTENIDO FINAL DEL REGFILE ===");
        for (i = 0; i < 16; i = i + 1)
            $display("R%0d=%08h", i, dut.arm.dp.rf.rf[i]);
        $finish;                         // finaliza la simulación
    end

initial begin
  $dumpfile("dump.vcd");   // Nombre del archivo de salida
  $dumpvars;               // Registra todas las señales del testbench
end
endmodule
ARCHIVO: top.v
module top (
    input  wire        clk,
    input  wire        reset,
    output wire [31:0] PC,
    output wire [31:0] Instr,
    output wire [31:0] WriteData,
    output wire [31:0] Adr,
    output wire        MemWrite
);

    wire [31:0] ReadData;

    arm arm (
        .clk       (clk),
        .reset     (reset),
        .PC        (PC),        
        .Instr     (Instr),    
        .MemWrite  (MemWrite),
        .Adr       (Adr),
        .WriteData (WriteData),
        .ReadData  (ReadData)
    );

    mem mem (
        .clk (clk),
        .we  (MemWrite),
        .a   (Adr),
        .wd  (WriteData),
        .rd  (ReadData)
    );
endmodule
